@startuml classes-areditor

!include style.plantuml

' Interfaces

interface AREditorWireframeProtocol {
    {static} createAREditorModule(of: MarbleRunEntity) -> UIViewController
    presentSelectElement(from: AREditorViewProtocol)
    presentSelectMode()
    changeMode(with: MarbleRunEntity)
}

interface AREditorViewProtocol {
    presenter : AREditorPresenterProtocol?
    subview : ARViewController?
    elementSelected(element: ElementEntity)
    initializeMarbleRun()
    add(element: ElementEntity)
    add(elements: [ElementEntity])
    set(elementAt: Triple<Int, Int, Int>, to: ElementState)
    remove(at: Triple<Int, Int, Int>)
    rotate(at: Triple<Int, Int, Int>, rotation: SCNVector3, completionHandler: ((_ rotation: SCNVector4) -> Void))
    toggleAddCancel()
    addBoundingBoxes(at: Set<Triple<Int, Int, Int>>)
    removeBoundingBoxes()
}

interface AREditorPresenterProtocol {
    view : AREditorViewProtocol?
    wireframe : AREditorWireframeProtocol?
    interactor : AREditorInteractorProtocol?
    viewDidLoad()
    readyForMarbleRun()
    didPressAddButton(on: AREditorViewProtocol)
    didPressCancelButton()
    didPressSaveAction()
    didPressChangeModeAction(from: ARSCNView)
    didPressLeaveAction()
    setNextElement(element: ElementEntity)
    buildElement(at: Triple<Int, Int, Int>)
    removeElement(at: Triple<Int, Int, Int>)
    selectElement(at: Triple<Int, Int, Int>)
    deselectElement()
    rotateElement(to: UISwipeGestureRecognizerDirection, with: Float)
}

interface AREditorInteractorProtocol {
    marbleRun : MarbleRunEntity?
    getPossibleLocations() -> Set<Triple<Int, Int, Int>>
    buildElement(element: ElementEntity)
    removeElement(at: Triple<Int, Int, Int>) -> Bool
    rotateElement(at: Triple<Int, Int, Int>, rotate: (Float, Float, Float, Float))
    persist()
    retrieveMarbleRun() -> [ElementEntity]
}

interface ARWireframeProtocol {
    {static} createModule(of: MarbleRunEntity)
}

interface ARSCNViewDelegate {
    renderer(_: SCNSceneRenderer, willRenderScene: SCNScene, atTime: TimeInterval)
}

interface UIViewController {
    viewDidLoad()
    touchesBegan(_: Set<UITouch>, with: UIEvent?)
}

' Classes

class AREditorWireframe {
    {static} mainStoryboard: UIStoryboard
}

class AREditorView {
    marbleRun: MarbleRunNode?
    state : ARModeState
    marbleRunAngle : Float
    cancelButton: UIButton!
    addButton: UIButton!
    startButton: UIButton!
    didPressCancel(_: Any)
    didPressAdd(_: Any)
    didPressMenu(_: Any)
    didPressStart(_: Any)
    addTapGestureToSceneView()
    addLongTapGestureToSceneView()
    addSwipeGestureToSceneView()
    didTap(_: UIGestureRecognizer)
    selectElement(_: UIGestureRecognizer)
    didLongPress(_: UILongPressGestureRecognizer)
    didSwipe(_: UISwipeGestureRecognizer)
    menuAction()
    updateMarbleRunPosition()
}

class AREditorPresenter

class AREditorInteractor {
    possibleBaselevelLocations() -> Set<Triple<Int, Int, Int>>
    possibleTopLocations() -> Set<Triple<Int, Int, Int>>
    hasElementOnTop(of location: Triple<Int, Int, Int>) -> Bool
    checkRemoveElement(at location: Triple<Int, Int, Int>) -> Bool
    neighborLocations(from location: Triple<Int, Int, Int>?) -> [Triple<Int, Int, Int>]
    getAllBaseElements(except location: Triple<Int, Int, Int>?) -> [Triple<Int, Int, Int>]?
}

' Relationships

AREditorViewProtocol -r-> AREditorPresenterProtocol
AREditorPresenterProtocol -l-> AREditorViewProtocol
AREditorPresenterProtocol -r-> AREditorInteractorProtocol
AREditorWireframeProtocol <-u-- AREditorPresenterProtocol

' Implementations

AREditorWireframe .u.|> AREditorWireframeProtocol
AREditorWireframe .u.|> ARWireframeProtocol
AREditorView .u.|> AREditorViewProtocol
AREditorPresenter .u.|> AREditorPresenterProtocol
AREditorInteractor .u.|> AREditorInteractorProtocol
AREditorView .|> UIViewController
AREditorView ..|> ARSCNViewDelegate

@enduml
